Ansible Scenario-Based Interview Questions for Professionals
This document provides a collection of scenario-based interview questions for seasoned Ansible professionals. Each scenario is designed to test practical knowledge, strategic thinking, and problem-solving skills in real-world situations.

1. Multi-Tier Application Deployment
Scenario:
You need to deploy a multi-tier application consisting of a web server, application server, and database server.

Question:
How would you design your Ansible playbooks and roles to handle this deployment efficiently?

Answer:
To handle a multi-tier application deployment efficiently, I would use a modular approach with Ansible roles. Each tier (web server, application server, database server) would have its own role. The directory structure might look like this:

site.yml
roles/
  web/
    tasks/
      main.yml
    templates/
      web.conf.j2
  app/
    tasks/
      main.yml
    templates/
      app.conf.j2
  db/
    tasks/
      main.yml
    templates/
      db.conf.j2
inventory/
  production/
    hosts
    group_vars/
      all.yml
      web.yml
      app.yml
      db.yml
In site.yml, I would include all the roles:

- hosts: web
  roles:
    - role: web

- hosts: app
  roles:
    - role: app

- hosts: db
  roles:
    - role: db

This structure promotes reusability and ease of management.

2. Rolling Updates with Zero Downtime
Scenario:
You are required to implement a rolling update for an application to ensure zero downtime.

Question:
Explain how you would achieve this using Ansible.

Answer:
To implement a rolling update with zero downtime, I would use a combination of Ansible playbooks and a load balancer. The process involves updating a subset of servers at a time while ensuring the load balancer only directs traffic to healthy nodes. Here’s a high-level approach:

Drain Traffic: Use Ansible to interact with the load balancer API to drain traffic from the first subset of servers.

Update Servers: Apply the updates to the drained servers.

Health Check: Ensure the updated servers pass health checks.

Restore Traffic: Add the updated servers back to the load balancer.

Repeat: Move on to the next subset of servers and repeat the process.

Example playbook:

- hosts: web_servers
  serial: 2
  tasks:
    - name: Drain traffic from web server
      uri:
        url: "http://loadbalancer/api/drain/{{ inventory_hostname }}"
        method: POST

    - name: Update web server
      include_role:
        name: web

    - name: Perform health check
      uri:
        url: "http://{{ inventory_hostname }}/health"
        status_code: 200
        retries: 5
        delay: 10

    - name: Add web server back to load balancer
      uri:
        url: "http://loadbalancer/api/add/{{ inventory_hostname }}"
        method: POST

3. Handling Secret Management
Scenario:
You need to manage sensitive information such as passwords or API keys in your Ansible playbooks.

Question:
How do you securely handle this data?

Answer:
For managing sensitive information in Ansible, I use Ansible Vault. Ansible Vault allows you to encrypt sensitive data within YAML files.

To encrypt a file:

ansible-vault encrypt secrets.yml
To use the encrypted secrets in a playbook:

- hosts: all
  vars_files:
    - secrets.yml
  tasks:
    - name: Use secret API key
      uri:
        url: "https://api.example.com/data"
        headers:
          Authorization: "Bearer {{ api_key }}"

To run the playbook with the vault password:

ansible-playbook playbook.yml --ask-vault-pass
4. Idempotency Issues
Scenario:
During a deployment, you notice that one of your tasks is not idempotent.

Question:
How do you identify and fix this issue?

Answer:
Idempotency means that running a task multiple times should have the same effect as running it once. To identify and fix idempotency issues:

Identify the Task: Determine which task is causing the issue by reviewing the output of ansible-playbook with the -v (verbose) flag.

Analyze the Task: Check if the task is correctly checking for the desired state before making changes. For example, ensure that file changes, service restarts, or package installations are conditional.

Fix the Task: Modify the task to check for the current state before making changes.

Example of a non-idempotent task:

- name: Add line to file
  lineinfile:
    path: /etc/example.conf
    line: "new configuration"

Fixed idempotent task:

- name: Add line to file if not present
  lineinfile:
    path: /etc/example.conf
    line: "new configuration"
    state: present
5. Troubleshooting Playbook Failures
Scenario:
Your playbook worked previously, but now it’s failing.

Question:
Describe your approach to troubleshooting a failing playbook that worked previously.

Answer:
To troubleshoot a failing playbook:

Check Recent Changes: Review recent changes in the playbook, roles, or inventory files.

Verbose Output: Run the playbook with increased verbosity (-vvv) to get detailed output and identify where it fails.

Environment Consistency: Ensure the environment where the playbook is run hasn’t changed (e.g., different Ansible version, OS updates, or network configurations).

Isolate the Issue: Isolate the failing task by running it independently or within a minimal playbook.

Logs and Debugging: Use Ansible’s debug module to print variables and outputs at various stages.

External Dependencies: Check for external dependencies (e.g., repositories, external services) that might be causing the failure.

Example of using the debug module:

- name: Print variable value
  debug:
    var: my_variable

6. Ansible Dynamic Inventory
Scenario:
You need to manage a dynamic infrastructure where servers are frequently added or removed.

Question:
How would you implement dynamic inventory in Ansible?

Answer:
To manage a dynamic infrastructure, I would use Ansible’s dynamic inventory feature. This can be achieved by using inventory scripts or plugins that query external data sources such as cloud provider APIs (e.g., AWS, Azure).

Example using AWS EC2 dynamic inventory:

Install the AWS Inventory Plugin:

pip install boto boto3
Configure the AWS Inventory Plugin:

plugin: aws_ec2
regions:
  - us-east-1
filters:
  tag:Environment: production

Use the Dynamic Inventory in Playbooks:

ansible-playbook -i aws_ec2.yml playbook.yml

7. Handling Configuration Drift
Scenario:
Over time, the configuration of servers might drift from the desired state defined in Ansible playbooks.

Question:
How do you ensure servers remain in the desired state?

Answer:
To ensure servers remain in the desired state, I would implement regular configuration enforcement using Ansible Tower/AWX or a cron job that runs playbooks periodically. Additionally, I would use Ansible’s check mode to detect drift without making changes.

Example cron job:

0 2 * * * ansible-playbook -i inventory playbook.yml
8. Optimizing Playbook Performance
Scenario:
Your playbook takes too long to execute.

Question:
How do you optimize the performance of your Ansible playbooks?

Answer:
To optimize playbook performance:

Parallelism: Increase the number of forks to run tasks in parallel.

ansible-playbook -i inventory playbook.yml -f 10
Delegate Tasks: Delegate tasks to appropriate hosts to distribute the load.

- name: Fetch something
  delegate_to: localhost
Limit Scope: Use --limit to target specific hosts.

ansible-playbook -i inventory playbook.yml --limit web_servers
Asynchronous Tasks: Use asynchronous tasks for long-running operations.

- name: Long running task
  command: /path/to/long_running_command
  async: 3600
  poll: 0

- name: Wait for long running task to finish
  async_status:
    jid: "{{ async_task_result.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 30
  delay: 60

9. Handling Dependencies
Scenario: Your playbook depends on multiple external roles and collections.

Question:
How do you manage these dependencies efficiently?

Answer:
I would use requirements.yml to manage external roles and collections. This file lists all dependencies, which can be installed using ansible-galaxy.

Example requirements.yml:

roles:
  - src: geerlingguy.nginx
  - src: geerlingguy.mysql
collections:
  - name
To install dependencies:

ansible-galaxy install -r requirements.yml
10. Ansible and CI/CD Integration
Scenario:
You want to integrate Ansible with your CI/CD pipeline.

Question:
How would you achieve this?

Answer:
To integrate Ansible with a CI/CD pipeline, I would use tools like Jenkins, GitLab CI, or GitHub Actions. The CI/CD pipeline would trigger Ansible playbooks to deploy or update infrastructure.

Example using GitLab CI:

stages:
  - deploy

deploy:
  stage: deploy
  script:
    - ansible-playbook -i inventory playbook.yml
11. Error Handling in Playbooks
Scenario:
Some tasks in your playbook are prone to failure.

Question:
How do you handle errors in Ansible playbooks?

Answer:
To handle errors:

Ignore Errors: Use ignore_errors: yes for non-critical tasks.

- name: Task that might fail
  command: /bin/false
  ignore_errors: yes
Retries: Use retries and delay for tasks that might fail intermittently.

- name: Retry task
  command: /path/to/command
  retries: 5
  delay: 10
  until: result.rc == 0
  register: result
Rescue and Always: Use block, rescue, and always for structured error handling.

- name: Structured error handling
  block:
    - name: Task that might fail
      command: /bin/false
  rescue:
    - name: Handle failure
      debug:
        msg: "Task failed"
  always:
    - name: Always run
      debug:
        msg: "This always runs"
12. Configuring Ansible for Network Automation
Scenario:
You need to automate network device configurations.

Question:
How do you configure Ansible for network automation?

Answer:
For network automation, I would use Ansible network modules and collections like ansible.netcommon and vendor-specific collections.

Example playbook for Cisco devices:

- hosts: cisco_routers
  gather_facts: no
  tasks:
    - name: Configure interface
      cisco.ios.ios_interface:
        name: GigabitEthernet1
        description: "Configured by Ansible"
        enabled: yes
13. Ansible in a Multi-Cloud Environment
Scenario:
You manage resources across multiple cloud providers.

Question:
How do you manage multi-cloud environments with Ansible?

Answer:
To manage multi-cloud environments, I would use dynamic inventories and cloud-specific modules for each provider (AWS, Azure, GCP).

Example using multiple dynamic inventories:

plugin: aws_ec2
regions:
  - us-east-1

plugin: azure_rm
ansible-playbook -i aws_ec2.yml -i azure_rm.yml playbook.yml
14. Migrating Legacy Scripts to Ansible
Scenario:
You have legacy shell scripts for server management.

Question:
How do you migrate these scripts to Ansible playbooks?

Answer:
To migrate legacy scripts to Ansible:

Identify Tasks: Break down the shell script into discrete tasks.

Use Ansible Modules: Replace shell commands with equivalent Ansible modules.

Structure Playbooks: Organize tasks into roles and playbooks for better management.

Example migration:

Original shell script:

#!/bin/bash
apt-get update
apt-get install -y nginx
echo "Hello, World!" > /var/www/html/index.html
Migrated Ansible playbook:

- hosts: web
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Create index.html
      copy:
        content: "Hello, World!"
        dest: /var/www/html/index.html
15. Managing Multiple Environments
Scenario:
You need to manage different environments (development, staging, production) with Ansible.

Question:
How do you organize your Ansible configuration to handle multiple environments?

Answer:
To manage multiple environments, I would use separate inventory files and group variables for each environment.

Example directory structure:

inventories/
  development/
    hosts
    group_vars/
      all.yml
  staging/
    hosts
    group_vars/
      all.yml
  production/
    hosts
    group_vars/
      all.yml
site.yml
In site.yml, specify the inventory file based on the environment:

ansible-playbook -i inventories/development/hosts site.yml
ansible-playbook -i inventories/staging/hosts site.yml
ansible-playbook -i inventories/production/hosts site.yml
This approach keeps environment-specific configurations separate and manageable.

About
No description, website, or topics provided.
Resources
 Readme
 Activity
Stars
 3 stars
Watchers
 1 watching
Forks
 3 forks
Report repository
Releases
No releases published
Packages
No packages published
Footer
...........................................................................................................
Ansible Can be used for :

Installing one application in multiple server
Multiple application in multiple servers
Creating users in multiple servers
managing / updating configurations in different redhat or ubuntu distributions.
Ansible Definitaion :

IT Automation tool built by python programming language.
Why Automation :

Manual is time consuming
Manual have chances of error
Manual is repetitive task
Ansible doesnot have Master slave or Agent based architecture , it is agentless.

Advantege of Ansible :

Agentless architect
simple and easy to use via YAML playbook
Configuration management like provisioning, deployment, infra management.
Scalability , can manage large no. of servers simlteneously using inventory
Playbooks we can run multiple times without changing the system state.
Open soure, large user base, community contributions
Integrations with other tools such as Docker , K8s, AWS
How Ansible Works :

3 Components : Inventory , Playbook , Module
Module : Small programs to do task, eg. shell, systemctl, package etc modules
Inventory : Modules that need to be run on specific servers
Playbook : anything that we are Executing or playing or running something i.e installing nginx
we can have multiple tasks in same playbook
we can have multiple modules in playbook
vmware for windows, parallel desktop for MacOS

Ansible Setup : A1 : ansible main server B1 : our machines.

All servers should be on the same network i.e they should be able to ping. we can check the ip using ifconfig

Step 1 : check if server able to acces from another machine. B1 : ifconfig (//to install use yum install net-tools get eth0 ip address ) A1 : ssh username@private-ip-of-B1 A1 : exit

Step 2 : Passwordless authentication :

A1 : ssh-keygen A1 : ssh-copy-id private-ip-of-B1

Step 3 : Installing ansible

A1 : sudo yum install epel-release (// OPTIONAL installing and updating extra packages for enterprise linux ) A1 : sudo yum install ansible ( // dnf is latest version of yum ) A1 : ansible --version A1 : ansible localhost -m ping ( // testing whether ansible workingor not )

Step 4 : Configurations

A1 : cd /etc/ansible ( // Ansible global configuration file is located there. ) here we will get 3 files : roles , hosts , ansible.cfg by default this conf file will be empty , to create a blueprint or example ansible.cfg file run this command :

A1 : ansible-config init --disabled -t all > ansible.cfg A1 : cat ansible.cfg

Step 5 : Ansible Playbooks PING Module

A1 : mkdir playbooks ( // just creating directory for maintaining ) NOW ALL PLAYBOOKS IN GIT : https://github.com/qriz1452/ansible/blob/main/Playbooks/01-ping-test-connectivity.yml A1 : ansible-playbook your-playbook.yml

** The execution is : play --> gather task --> tasks --> other tasks --> play recap ** if any error in running playbook we will get the error details on the console only. ** we can use linting aswell.

A1 : ansible-playbook --syntax-check playbook.yml

Step 5 : Ansible Playbooks PING and debud Module

Pinging localhost and printing some text. Playbook URL : https://github.com/qriz1452/ansible/blob/main/Playbooks/02-ping-debug-modules.yml

Step 6 : Ansible playbook yum and service module

installing and starting the package , service Playbook URL : https://github.com/qriz1452/ansible/blob/main/Playbooks/03-yum-service.yml

A1 : nginx A1 : playbook run A1 : nginx A1 : systemctl status nginx ( // it will show started and enabled )

Step 7 : Overview of Ansible Playbook

Ansible docs for modules and its parameters.

Step 8 : Playbook for remote servers :

A1 : cd /etc/ansible A1 : cat hosts ( // default inventory file for ansible inventory ) A1 : ansible-inventory --list ( // we can list the servers/hosts from default inventory file ) A1 : ansible all -m ping ( // pinging all ip in hosts inventory file )

Update the ansible playbook ( Step 5 ) and replace localhost with all

A1 : ansible-playbook --syntax-check playbook.yml A1 : ansible-playbook  playbook.yml

Step 9 : Installing package on remote server :

Update the ansible playbook ( Step 6 ) and replace localhost with all Also add the ip of remote server on hosts file located at /etc/ansible 

A1 : ansible-playbook --syntax-check playbook.yml A1 : ansible-playbook  playbook.yml

Step 10 : Copying files with changing owner , group and changing permission

Playbook URL : https://github.com/qriz1452/ansible/blob/main/Playbooks/04-Copying%20files%20to%20remote.yml Apply playbook and verify on remote server copied or not.

permission and group, owner etc will be same in both server. If we dont change the file and run the copy playbook again then it will no copy the file again. If we made changes then copying again then it will OVERWRITE.

Step 11 : Creating Backup while copying

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/05-Creating%20Backup%20while%20copying.yml If we made changes in file and copying then only backup will be created else it will not . The previous file will be renamed with adding date and timestamp.

Step 12 : creating files and directories and deleting them

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/06-creating%20files%20and%20directories%20and%20deleting%20fileand%20dir.yml If we delete a directory all files in that dir will be deleted.

Step 13 : Changing Permissions of file and directory

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/07-changing%20permissions.yml

Step 14 : Running script

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/08-script-execution.yml

Ansible will run script from dir we have mentioned and the file if our script is creating will be created in homedirectory of remote server , if we want to define path of file then we can add full path in script or in ansible playbook. And if we are printing anything via script we can do via logging to a file or creating log via ansible playbook using >>

Step 15 : CRON job execution

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/09-CRON%20job%20execution.yml

To check cron jobs use command : crontab -l

Step 16 : CRON job deleting

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/10-CRON%20job%20modify.yml

THE CRON JOB NAME SHOULD BE SAME

Step 17 : CRON job modifying

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/09-CRON%20job%20execution.yml Just modify minute, hour etc...

To disable a cron jobs use disabled: yes in playbook.

Step 18 : Cron Job ENV

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/11-CRON%20job%20ENV%20variable.yml we can use insertafter or insertbefore if we have requirement to initialise vars before or after other. To delete var use state: absent in playbook.

Step 19 : User management

Playbook: https://github.com/qriz1452/ansible/blob/main/Playbooks/12-user-management.yml We can check the users on vm using su your-user or its password in cat /etc/passwd   or id nick To add a group groupadd your-group and check groups cat /etc/group

In playbook if we need to add multiple groups use groups: QA,nick0 To delete the user add state: absent To delete user data add remove: yes

Step 20 : Password management

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/13-password-management.yml Password should be hashed encoded in playbook. so instead of plain text follow the playbook

Step 21 : Process management

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/14-process-management.yml To find the PID of running process use pgrep nginx   and to kill it use pgrep nginx | xargs kill

Step 22 : Downloading file from internet

Playbook : https://github.com/qriz1452/ansible/blob/main/Playbooks/15-downloading-file.yml get_url module works with ftp, http, and https

Step 23: Firewall and port management

Playbook: https://github.com/qriz1452/ansible/blob/main/Playbooks/16-firewall-and-port.yml

we can directly enable service port by adding service: nginx for well known services instead of port: 80/tcp.

Step 24 : Run tasks as SUDO user

Just add become: true in playbook. and when running playbook use  ansible-playbook --ask-become-pass playbook.yml so it will prompt for password else will get an password error

=========================================

Step 25 : Ansible AdHoc Tasks

ansible myserver -m command -a "df -h"

ansible localhost -m ping

ansible 1.1.1.1 -m copy -a "src=/tmp/file.txt" dest="/home/file.txt" mode=0777 -b --ask-become-pass

ansible all -m service -a "name=nginx state=reloaded" 

ansible all -m shell -a "/home/script.sh"

ansible all -m command -a "free -h"

ansible all -m yum -a "name=vim state=present"

Step 26 : Ansible Tags

If we have multiple tasks in ansible playbook and we want to run few tasks only for example : Ansible playbook --> 2 tasks i.e nginx installation and ngins service start --> add tags --> use 1 tag to execute 1 task

tags: ins-nginx add this same as name,module indentation.

ansible-playbook paybook.yml --list-tags : To list all tags

ansible-playbook playbook.yml -t ins-nginx : will run installation task only

ansible-playbook playbook.yml --skip-tags : will run non tag tasks

Step 27 : Variables in Ansible
